@page "/Edit/{aId:int}"
@using DNP1Assignment1.Models
@using DNP1Assignment1.Persistence
@inject IFileContext AdultData
@inject NavigationManager NavMgr

<h3>Edit adult with id: @aId</h3>

@if (adultToEdit == null)
{
    <em>Todo not found!</em>
}
else
{
    <EditForm Model="@adultToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            First Name:<br/>
            <InputTextArea @bind-Value="adultToEdit.FirstName"/>
        </div>
        <div class="form-group">
            Last Name:<br/>
            <InputTextArea @bind-Value="adultToEdit.LastName"/>
        </div>
        <div class="form-group">
            Hair Color:<br/>
            <InputTextArea @bind-Value="adultToEdit.HairColor"/>
        </div>
        <div class="form-group">
            Eye Color:<br/>
            <InputTextArea @bind-Value="adultToEdit.EyeColor"/>
        </div>
        <div class="form-group">
            Age:<br/>
            <InputNumber @bind-Value="adultToEdit.Age"/>
        </div>
        <div class="form-group">
            Weight:<br/>
            <InputNumber @bind-Value="adultToEdit.Weight"/>
        </div>
        <div class="form-group">
            Height:<br/>
            <InputNumber @bind-Value="adultToEdit.Height"/>
        </div>
        <div class="form-group">
            Job Title:<br/>
            <InputTextArea @bind-Value="adultToEdit.JobTitle.JobTitle"/>
        </div>
        <div class="form-group">
            Salary:<br/>
            <InputNumber @bind-Value="adultToEdit.JobTitle.Salary"/>
        </div>
        <div class="form-group">
            Gender:
            <select class="form-control selectpicker" @onchange="arg => ChangeGender(arg)">
                <option>Male</option>
                <option>Female</option>
            </select>
        </div>

        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Save</button>
        </p>
    </EditForm>
}

@code {

    [Parameter]
    public int aId { get; set; }

    private Adult adultToEdit;

    protected override async Task OnInitializedAsync()
    {
        adultToEdit = AdultData.GetAdult(aId);
    }

    private void ChangeGender(ChangeEventArgs args)
    {
        adultToEdit.Sex = null;
        try
        {
            adultToEdit.Sex = args.Value.ToString();
        }
        catch (Exception e)
        {
        }
    }

    private void Save()
    {
        AdultData.Update(adultToEdit);
        NavMgr.NavigateTo("/Adults")
            ;
    }

}